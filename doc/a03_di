# DI(dependency injection)
1. spring framework에서 사용되는 컨테이너에서 처리되는 개념이다.
	스프링 프레임워크의 핵심 개념으로 이에 대한 이론과 실제 처리 방법을 알면,
	스프링의 환경설정과 객체 사용에 대한 명확한 기준을 정립하고 활용할 수 있게 된다.
2. 지식계열화(di를 이해하고 사용하기 위해 단계로 알아야 할 개념)
	1) 스프링에서의 객체 사용 메커니즘
		만능키트 ==> 스프링에서 핵심 객체는 컨테이너 메모리에 올려서 호출하는 식으로 사용한다.
		주소 ==> 웹 서버 ==> web.xml ==> 컨테이너 호출(dispatcher-servlet.xml)
		==> 객체 메모리 로딩 ==> 그 주소에 mapping controller, 메소드 호출 ==>
		model ==> view
			
	2) IOC(Inversion of Controller) 이해
		제어권의 역전이란, 객체의 생성, 생명 주기의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미한다.
		컴포넌트 의존 관계 결정, 설정 및 생명주기를 해결하기 위한 디자인 패턴을 말한다.
		스프링 프레임워크도 객체에 대하 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있음.
		즉, IOC 컨테이너 기능을 제공한다.
		IOC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리한다.
		POJO(plain old java object)의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다.
		개발자들이 직접 pojo를 생성할 수 있지만 컨테이너에게 맡긴다.

	3) IOC에서 파생하는 개념들
		DL(Dependency lookup) 저장소에 저장되어 있는 bean에 접근하기 위해
		컨테이너가 제공하는 api를 이용하여 bean을 lookup 하는 것
	4) DI 개념 : 각 클래스 간의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것
		- setter injection
		- constructor injection
		- method injection
	5) 스프링 컨테이너 활용연습(xml ==> java)
		웹 서버가 로딩될 때, 컨테이너를 활용해서 웹 프로그램 처리
		간단하게 java main()에 실행 환경도 컨테이너 활용을 연습할 수 있게 만듦
		.xml(컨테이너) ==> java 클래스 선언 후, xml로 객체가 생성되게 처리, 기능 메소드(property)
		이 컨테이너를 java단에서 호춣하여, 실제 객체가 컨테이너에서 어떻게 메모리를 할당하고 사용하는지를 확인
		ex) DIExp12.java, d12.xml 생성
			//	Product vo 생성, 물건명 가격 개수 선언
			1) Product 클래스 선언 필드로 물건명, 가격, 개수 선언
			2) d12.xml 컨테이너에서 객체를 생성하고 데이터 할당, id로 외부에서 호출할 수 있게 선언
			3) DIExp12.java에서 id로 객체를 호출하여 main()에서 해당 객체가 생성 및 데이터 저장 내용을
				getXXX() 메소드를 통해서 확인
# 객체와 객체의 의존 관계 설정
1. 클래스 구조 선언
	1) HandPhone 번호 제조사
	2) HPerson 이름 HandPhone show()

2. 컨테이너에서 설정관계
	1) 직접적으로 객체와 객체의 연관관계를 설정
		HandPhone 선언
		HPerson 선언
			property로 위에 선언한 HandPhone 객체가 할당하게 선언
	2) HPerson autowire를 선언하여, 속성에 따라 
		byType : 컨테이너에 해당 타입이 선언되어 있으면 할당
		byName : 컨테이너에 해당 타입이 선언되어 있고 할당할 객체의 id와 set 프로퍼티가 동일할 때 할당 처리
3. 컨테이너 + 클래스 선언을 통한 autowire 선언
	1) 컨테이너에선 객체만 생성되게 하고,
	2) 클래스를 선언할 때, autowiring이 필요한 부분에 대하여, @(어노테이션)을 이용해서 autowiring 선언

# Autowired(자동 주입 설정)
1. 스프링 빈의 요구사항과 매칭되는 어플리케이션 컨텍스트 상에서
	다른 빈을 찾아 빈 간의 의존성을 자동으로 만족시키도록 하는 수단이다.
2. 의존성 자동 주입 설정 옵션
	1) no : 의존성 자동 주입이 일어나지 않게 설정
	2) byType : 할당할 type(객체)가 있으면 자동으로 주입되게 처리한다.
	3) byName : type이 있고, 기능 메소드명이 객체의 참조명과 같을 때 처리된다.
	4) constructor : 의존성 자동 주입이 생성자의 매개변수의 type으로 결정된다.
	5) autodetect : 자동으로 생성자나 기능 property로 설정이 된다.